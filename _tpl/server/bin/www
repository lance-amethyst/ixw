#!/usr/bin/env node

/**
 * Module dependencies.
 */
var service = require('../service.js');
var app = require('../app');
var debug = require('debug')(IXS.getProjectName() + ':server');
var https = require('https');
var http = require('http');

var port = service.getPort();
app.set('port', port);

var server = null;
if (service.useHTTPS()){
	var sslOptions = service.getOptions();
	if (!sslOptions) {
		console.error('HTTPS is required but credentials is not provided!');
		process.exit(1);
	}
	server = https.createServer(sslOptions, app);
} else
	server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
